# # This is a basic workflow to help you get started with Actions

name: alias-lambda-creation

          # - "app v1 (100% to 'app v1' | MANUAL ROLLBACK | point to 'app v1')"
          # - "0.10 (10% to 'app v2' | Canary Deployment | ALIAS_STAGE1)"
          # - "0.50 (50% to 'app v2' | Canary Deployment | ALIAS_STAGE2)"
          # - "0.90 (90% to 'app v2' | Canary Deployment | ALIAS_STAGE3)"
          # - "1.0 (100% to 'app v2' | Canary Deployment | ALIAS_STAGE4)"
          # - "app v2  (100% to 'app v2' | Promote Canary | ALIAS_STAGE5 directly pointing to 'app v2')"

on:
  workflow_dispatch:
    inputs:
      canary_weight:
        description: "Canary Weight (0.0 - 1.0) traffic for app v2. 0.10=10%, 0.50=50%, 0.90=90%, 1.0=100%, rollback_v1=100% to app v1, direct_v2=100% to app v2"
        required: true
        default: "0.10"
        type: choice
        options:
          - "rollback_v1"
          - "0.10"
          - "0.50"
          - "0.90"
          - "1.0"
          - "direct_v2"
        notify:
          description: 'Notify Approver on Email ?'
          required: true
          type: boolean
          default: true
        # environment:
        #   description: 'Environment type - APIGW Stages - DEV --> RELEASE --> STAGE'
        #   type: environment
        #   required: false

#
# on:
#   workflow_run:
#     workflows: ["lambda-app-v2-deploy"]   # Name of the workflow this workflow depends on
#     branches:
#       - main
#     types:
#       - completed           # Triggers after lambda-app-v2-deploy completes

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # integration with OIDC recommended
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # integration with OIDC recommended
          aws-region: ${{ secrets.AWS_REGION }}


###################################################################
# wait 30 secs delay for lambda to get active and updates to get successful
###################################################################

      - name: Wait for Lambda updation to finish
        run: |
            STATE=$(aws lambda get-function \
              --function-name app \
              --query 'Configuration.State' \
              --output text)
            LASTUPDATE=$(aws lambda get-function \
              --function-name app \
              --query 'Configuration.LastUpdateStatus' \
              --output text)
            echo "State: $STATE, LastUpdateStatus: $LASTUPDATE"
            if [ "$STATE" = "Active" ] && [ "$LASTUPDATE" = "Successful" ]; then
              sleep 30
              break
            fi

###################################################################
# Get latest lambda version for "app v1" description
###################################################################

      - name: Get latest app v1 Lambda version
        run: |
          LATEST_V1=$(aws lambda list-versions-by-function \
            --function-name app \
            --query "Versions[?Description=='app v1'] | [-1].Version" \
            --output text)
          echo "LATEST_V1=$LATEST_V1" >> $GITHUB_ENV
          echo "Latest app v1 Lambda version is $LATEST_V1"


###################################################################
# Get latest lambda version for "app v2" description
###################################################################

      - name: Get latest app v2 Lambda version
        run: |
          LATEST_V2=$(aws lambda list-versions-by-function \
            --function-name app \
            --query "Versions[?Description=='app v2'] | [-1].Version" \
            --output text)
          echo "LATEST_V2=$LATEST_V2" >> $GITHUB_ENV
          echo "Latest app v2 Lambda version is $LATEST_V2"

###################################################################
# Create alias with canary weights - stage 1 (90% "app v1" and 10% "app v2")
###################################################################

#

      - name: Check if Lambda alias ALIAS_STAGE1 exists
        id: check_alias_stage1
        run: |
          set +e
          aws lambda get-alias --function-name app --name ALIAS_STAGE1
          ALIAS_EXISTS=$?
          echo "ALIAS_EXISTS=$ALIAS_EXISTS" >> $GITHUB_ENV
          set -e

      - name: Create Lambda alias stage1
        if: env.ALIAS_EXISTS == '254'
        run: |
          echo "${{ github.event.inputs.canary_weight}}"
          echo "The latest version of app v2 is : $LATEST_V2"
          aws lambda create-alias \
            --function-name app \
            --name ALIAS_STAGE1 \
            --function-version $LATEST_V1 \
            --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": 0.10}}" \
            --description "ALIAS_STAGE1"

###################################################################
# Create alias with canary weights - stage 2 (50% "app v1" and 50% "app v2")
###################################################################

      - name: Check if Lambda alias ALIAS_STAGE2 exists
        id: check_alias_stage2
        run: |
          set +e
          aws lambda get-alias --function-name app --name ALIAS_STAGE2
          ALIAS_EXISTS=$?
          echo "ALIAS_EXISTS=$ALIAS_EXISTS" >> $GITHUB_ENV
          set -e

      - name: Create Lambda alias stage2
        if: env.ALIAS_EXISTS == '254'
        run: |
          echo "The latest version of app v2 is : $LATEST_V2"
          aws lambda create-alias \
            --function-name app \
            --name ALIAS_STAGE2 \
            --function-version $LATEST_V1 \
            --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": 0.50}}" \
            --description "ALIAS_STAGE2"

###################################################################
# Create alias with canary weights - stage 3 (10% "app v1" and 90% "app v2")
###################################################################

      - name: Check if Lambda alias ALIAS_STAGE3 exists
        id: check_alias_stage3
        run: |
          set +e
          aws lambda get-alias --function-name app --name ALIAS_STAGE3
          ALIAS_EXISTS=$?
          echo "ALIAS_EXISTS=$ALIAS_EXISTS" >> $GITHUB_ENV
          set -e

      - name: Create Lambda alias stage3
        if: env.ALIAS_EXISTS == '254'
        run: |
          echo "The latest version of app v2 is : $LATEST_V2"
          aws lambda create-alias \
            --function-name app \
            --name ALIAS_STAGE3 \
            --function-version $LATEST_V1 \
            --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": 0.90}}" \
            --description "ALIAS_STAGE3"

###################################################################
# Create alias with canary weights - stage 4 (0% "app v1" and 100% "app v2")
###################################################################

      - name: Check if Lambda alias ALIAS_STAGE4 exists
        id: check_alias_stage4
        run: |
          set +e
          aws lambda get-alias --function-name app --name ALIAS_STAGE4
          ALIAS_EXISTS=$?
          echo "ALIAS_EXISTS=$ALIAS_EXISTS" >> $GITHUB_ENV
          set -e

      - name: Create Lambda alias stage4
        if: env.ALIAS_EXISTS == '254'
        run: |
          echo "The latest version of app v2 is : $LATEST_V2"
          aws lambda create-alias \
            --function-name app \
            --name ALIAS_STAGE4 \
            --function-version $LATEST_V1 \
            --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": 1.00}}" \
            --description "ALIAS_STAGE4"


###################################################################
# Create alias with canary weights - stage 5 (100% "app v2")
###################################################################

      - name: Check if Lambda alias ALIAS_STAGE5 exists
        id: check_alias_stage5
        run: |
          set +e
          aws lambda get-alias --function-name app --name ALIAS_STAGE5
          ALIAS_EXISTS=$?
          echo "ALIAS_EXISTS=$ALIAS_EXISTS" >> $GITHUB_ENV
          set -e

      - name: Create Lambda alias stage5
        if: env.ALIAS_EXISTS == '254'
        run: |
          aws lambda create-alias \
            --function-name app \
            --name ALIAS_STAGE5 \
            --function-version $LATEST_V2 \
            --description "ALIAS_STAGE5"


###################################################################
# Create alias (ALIAS_PROD_ROLLBACK) for manual rollback - github actions workflow_dispatch
###################################################################


      - name: Check if Lambda alias ALIAS_PROD_ROLLBACK exists
        id: check_alias_rollback
        run: |
          set +e
          aws lambda get-alias --function-name app --name ALIAS_PROD_ROLLBACK
          ALIAS_EXISTS=$?
          echo "ALIAS_EXISTS=$ALIAS_EXISTS" >> $GITHUB_ENV
          set -e


      - name: Create Lambda alias ALIAS_PROD_ROLLBACK
        if: env.ALIAS_EXISTS == '254'
        run: |
          aws lambda create-alias \
            --function-name app \
            --name ALIAS_PROD_ROLLBACK \
            --function-version $LATEST_V2 \
            --description "ALIAS_PROD_ROLLBACK for alias based on selected rollout of alias weights or rollback"



###################################################################
# Update alias (ALIAS_PROD_ROLLBACK) for manual rollback
# with github actions workflow_dispatch
###################################################################

      - name: Check if Lambda alias ALIAS_PROD_ROLLBACK exists
        id: check_alias_rollback
        run: |
          set +e
          aws lambda get-alias --function-name app --name ALIAS_PROD_ROLLBACK
          ALIAS_EXISTS=$?
          echo "ALIAS_EXISTS=$ALIAS_EXISTS" >> $GITHUB_ENV
          set -e


      - name: update Lambda alias ALIAS_PROD_ROLLBACK
        if: env.ALIAS_EXISTS == '0'
        run: |
          STAGE="${{ github.event.inputs.canary_weight }}"
          echo "Selected rollout_stage = $STAGE"
          if [[ "$STAGE" == "rollback_v1" ]]; then
            echo "Rolling back: pointing ALIAS_PROD_ROLLBACK to 100% app v1 (version $LATEST_V1)"
            aws lambda update-alias \
              --function-name app \
              --name ALIAS_PROD_ROLLBACK \
              --function-version $LATEST_V1 \
              --description "Rolled back to 100% app v1"
          elif [[ "$STAGE" == "1.0" ]]; then
            echo "Cutting over: pointing ALIAS_PROD_ROLLBACK to 100% app v2 (version $LATEST_V2)"
            aws lambda update-alias \
              --function-name app \
              --name ALIAS_PROD_ROLLBACK \
              --function-version $LATEST_V1 \
              --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": $STAGE}}" \
              --description "Rolled back to 100% app v2"
          elif [[ "$STAGE" == "direct_v2" ]]; then
            echo "Cutting over: pointing ALIAS_PROD_ROLLBACK to 100% app v2 (version $LATEST_V2)"
            aws lambda update-alias \
              --function-name app \
              --name ALIAS_PROD_ROLLBACK \
              --function-version $LATEST_V2 \
              --description "Rolled back to 100% app v2"
          else
            echo "Incremental canary rollout: routing $STAGE traffic to alias ALIAS_PROD_ROLLBACK"          
            aws lambda update-alias \
              --function-name app \
              --name ALIAS_PROD_ROLLBACK \
              --function-version $LATEST_V1 \
              --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": $STAGE}}" \
              --description "Canary rollout with $STAGE traffic to alias ALIAS_PROD_ROLLBACK"

          fi
      #       aws lambda update-alias \
      #       --function-name "$FUNCTION_NAME" \
      #       --name "$ALIAS_NAME" \
      #       --function-version $LATEST_V1 \
      #       --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": 0.10}}" \
      #       --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": ${{ inputs.canary_weight }}}}" \#            --description "Canary alias rollout updated to ${{ inputs.canary_weight }}"




#           aws lambda create-alias \
#             --function-name app \
#             --name ALIAS_STAGE1 \
#             --function-version $LATEST_V1 \
#             --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": 0.10}}" \
# #            --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": $CANARY_WEIGHT}}" \
#             --description "ALIAS_STAGE1"


      # - name: Update alias
      #   if: env.ALIAS_EXISTS == '0'
      #   run: |
      #     aws lambda update-alias \
      #       --function-name "$FUNCTION_NAME" \
      #       --name "$ALIAS_NAME" \
      #       --function-version $LATEST_V1 \
      #       --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": 0.10}}" \
      #       --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": ${{ inputs.canary_weight }}}}" \#            --description "Canary alias rollout updated to ${{ inputs.canary_weight }}"






#       - name: Lambda ALIAS_STAGE1
#         run: |
#           aws lambda create-alias \
#             --function-name python-lambda2 \
#             --name ALIAS_VERSION1 \
#             --function-version 1 \
#             --routing-config '{"AdditionalVersionWeights": {"2": 0.10}}' \
#             --description "ALIAS_STAGE2"

