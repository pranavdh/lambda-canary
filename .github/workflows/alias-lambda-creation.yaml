# # This is a basic workflow to help you get started with Actions

name: alias-lambda-creation



# on:
#   workflow_dispatch:
#     inputs:
#       canary_weight:
#         description: "Weight (0.0 - 1.0) for app v2 traffic"
#         required: true
#         default: "0.10"


on:
  workflow_run:
    workflows: ["lambda-app-v2-deploy"]   # Name of the workflow this workflow depends on
    branches:
      - main
    types:
      - completed           # Triggers after lambda-app-v2-deploy completes

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CANARY_WEIGHT: ${{ inputs.canary_weight }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # integration with OIDC recommended
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # integration with OIDC recommended
          aws-region: ${{ secrets.AWS_REGION }}


###################################################################
# wait 30 secs delay for lambda to get active and updates to get successful
###################################################################

      - name: Wait for Lambda updation to finish
        run: |
            STATE=$(aws lambda get-function \
              --function-name app \
              --query 'Configuration.State' \
              --output text)
            LASTUPDATE=$(aws lambda get-function \
              --function-name app \
              --query 'Configuration.LastUpdateStatus' \
              --output text)
            echo "State: $STATE, LastUpdateStatus: $LASTUPDATE"
            if [ "$STATE" = "Active" ] && [ "$LASTUPDATE" = "Successful" ]; then
              sleep 30
              break
            fi

###################################################################
# Get latest lambda version for "app v1" description
###################################################################

      - name: Get latest app v1 Lambda version
        run: |
          LATEST_V1=$(aws lambda list-versions-by-function \
            --function-name app \
            --query "Versions[?Description=='app v1'] | [-1].Version" \
            --output text)
          echo "LATEST_V1=$LATEST_V1" >> $GITHUB_ENV
          echo "Latest app v1 Lambda version is $LATEST_V1"


###################################################################
# Get latest lambda version for "app v2" description
###################################################################

      - name: Get latest app v2 Lambda version
        run: |
          LATEST_V2=$(aws lambda list-versions-by-function \
            --function-name app \
            --query "Versions[?Description=='app v2'] | [-1].Version" \
            --output text)
          echo "LATEST_V2=$LATEST_V2" >> $GITHUB_ENV
          echo "Latest app v2 Lambda version is $LATEST_V2"

###################################################################
# Create alias with canary weights - stage 1 (90% "app v1" and 10% "app v2")
###################################################################


      - name: Check if Lambda alias exists
        id: check_alias
        run: |
          set +e
          aws lambda get-alias --function-name app --name ALIAS_STAGE1
          ALIAS_EXISTS=$?
          echo "ALIAS_EXISTS=$ALIAS_EXISTS" >> $GITHUB_ENV
          set -e


      - name: Lambda ALIAS_STAGE1
        if: env.ALIAS_EXISTS != '0'
        run: |
          aws lambda create-alias \
            --function-name app \
            --name ALIAS_STAGE1 \
            --function-version $LATEST_V1 \
           --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": 0.10}}" \
#            --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": $CANARY_WEIGHT}}" \
            --description "ALIAS_STAGE1"


      # - name: Update alias
      #   if: env.ALIAS_EXISTS == '0'
      #   run: |
      #     aws lambda update-alias \
      #       --function-name "$FUNCTION_NAME" \
      #       --name "$ALIAS_NAME" \
      #       --function-version $LATEST_V1 \
      #       --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": 0.10}}" \
      #       --routing-config "{\"AdditionalVersionWeights\": {\"$LATEST_V2\": ${{ inputs.canary_weight }}}}" \#            --description "Canary alias rollout updated to ${{ inputs.canary_weight }}"






#       - name: Lambda ALIAS_STAGE1
#         run: |
#           aws lambda create-alias \
#             --function-name python-lambda2 \
#             --name ALIAS_VERSION1 \
#             --function-version 1 \
#             --routing-config '{"AdditionalVersionWeights": {"2": 0.10}}' \
#             --description "ALIAS_STAGE2"

